'use client';  // Menandakan komponen ini hanya dijalankan di sisi klien

import { useState } from 'react';

// Tipe untuk produk
interface Product {
  id: number;
  name: string;
  price: number;
}

// Tipe untuk item di keranjang belanja
interface CartItem extends Product {
  quantity: number;
}

const products: Product[] = [
  { id: 1, name: 'Produk A', price: 100000 },
  { id: 2, name: 'Produk B', price: 200000 },
  { id: 3, name: 'Produk C', price: 300000 },
];

export default function Home() {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [discount, setDiscount] = useState<number>(0);

  // Menambahkan produk ke keranjang
  const addToCart = (product: Product) => {
    setCart((prevCart: CartItem[]) => {
      const existingProduct = prevCart.find((item) => item.id === product.id);
      if (existingProduct) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [...prevCart, { ...product, quantity: 1 }];
      }
    });
  };

  // Menghapus produk dari keranjang
  const removeFromCart = (productId: number) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== productId));
  };

  // Menghitung total harga
  const calculateTotal = (): number => {
    const totalPrice = cart.reduce((total, item) => {
      if (!item.price || !item.quantity) {
        console.error('Data item tidak lengkap:', item);
        return total;
      }
      return total + item.price * item.quantity;
    }, 0);
    const discountedPrice = totalPrice - (totalPrice * discount) / 100;
    return discountedPrice;
  };

  return (
    <div className='px-5 border-white border-2 mx-96 mt-52'>
      <h1 className='text-center'>E-commerce Sederhana</h1>

      {/* Daftar Produk */}
      <div>
        <h2>Produk</h2>
        {products.map((product) => (
          <div key={product.id} style={{ marginBottom: '10px' }}>
            <span>{product.name} - Rp{product.price}</span>
            <button onClick={() => addToCart(product)}>Tambah ke Keranjang</button>
          </div>
        ))}
      </div>

      {/* Keranjang Belanja */}
      <div style={{ marginTop: '20px' }}>
        <h2>Keranjang Belanja</h2>
        {cart.length === 0 ? (
          <p>Keranjang kosong</p>
        ) : (
          cart.map((item) => (
            <div key={item.id} style={{ marginBottom: '10px' }}>
              <span>{item.name} - Rp{item.price} x {item.quantity}</span>
              <button onClick={() => removeFromCart(item.id)}>Hapus</button>
            </div>
          ))
        )}
      </div>

      {/* Total Harga dan Diskon */}
      <div style={{ marginTop: '20px' }}>
        <h2>Total Harga: Rp{calculateTotal()}</h2>

        {/* Input Diskon */}
        <div>
          <label>Masukkan Diskon (%): </label>
          <input
            type="number"
            value={discount}
            onChange={(e) => {
              // Memastikan diskon berada dalam rentang yang benar
              const value = Math.max(0, Math.min(100, Number(e.target.value)));
              setDiscount(value);
            }}
            max={100}
            min={0}
            style={{ marginLeft: '10px' }}
          />
        </div>
      </div>
    </div>
  );
}